@echo off
setlocal EnableDelayedExpansion

set PACKAGE_NAMES=my_package my_other_package

:: Check for plantUML root
:: To customize, set environment variable "PLANTUML_ROOT"
if not "%PLANTUML_ROOT%"=="" goto ok_plantuml
set PLANTUML_ROOT=C:\Tools\PlantUML

:ok_plantuml
echo *** Using plantUML at "%PLANTUML_ROOT%"


:: Configure paths
set root=%~dp0..
set DST=%root%\html
set DOC=%root%\docs
set SRC=%root%\src

set PLANTUML=%PLANTUML_ROOT%\plantuml.cmd
set GRAPHVIZ=%PLANTUML_ROOT%\graphviz\bin

set PATH=%GRAPHVIZ%;%PATH%
set PYTHONPATH=%root%


:: Maybe clean output
if not "%1"=="clean" goto no_clean
echo *** Cleaning output folder at "%DST%"
rmdir /q /s "%DST%"
echo *** Cleaning autogenerated api stubs
rmdir /q /s "%DOC%\modules"
for %%a in ( %PACKAGE_NAMES% ) DO (
    rmdir /q /s "%DOC%\%%a\modules"
)
:no_clean

:: Run sphinx-apidoc
:: Sphinx-apidoc will autogenerate .rst-files that rely on the apidoc feature 
:: to generate the actual api documentation when sphinx-build is run.
echo *** apidoc: Build autogenrated api documentation outline as .rst
::set APIDOC_OPTIONS=--no-toc --force --module-first
::set APIDOC_OPTIONS=--force --module-first --separate
set APIDOC_OPTIONS=--force --module-first --separate --no-toc
for %%a in ( %PACKAGE_NAMES% ) DO (
    sphinx-apidoc %APIDOC_OPTIONS% -o "%DOC%\%%a\modules" "%SRC%\%%a" "test_*"
    if errorlevel 1 (
        echo Sphinx apidoc failed
        goto fail
    )
)

:: Run sphinx
echo *** Sphinx: Build HTML documentation in %DST%
sphinx-build -b html "%DOC%" "%DST%"
if errorlevel 1 (
    echo Sphix build failed
    goto fail 
)

:done
echo [ OK ]
exit /b 0

:fail
echo [FAIL] An error occurred (see above).
timeout 3
exit /b 1